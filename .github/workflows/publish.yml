name: Publish

on:
  release:
    types: [published] # run when a GitHub Release is published
  workflow_dispatch: {} # allow manual runs (useful for debugging)

permissions:
  contents: read
  id-token: write # needed for --provenance

jobs:
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug ref
        run: |
          echo "event: $GITHUB_EVENT_NAME"
          echo "ref:   $GITHUB_REF"
          echo "sha:   $GITHUB_SHA"
          git rev-parse HEAD
          git tag --points-at HEAD || true

      # Node first (Corepack ships with Node 20)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      # Install & activate pnpm via Corepack (reliable on GH runners)
      - name: Enable Corepack & activate pnpm
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare pnpm@9 --activate
          which pnpm
          pnpm --version

      # Cache pnpm store
      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # Build ONLY the publishable packages (not the example app)
      - name: Build packages (workspace)
        run: pnpm -r -F "@lyra-dev/*" build

      # Write auth to the npm config file npm actually reads (fixes 401)
      - name: Set npm token & verify auth
        run: |
          set -euxo pipefail
          test -n "${NPM_TOKEN}"

          CFG="${NPM_CONFIG_USERCONFIG:-$HOME/.npmrc}"
          {
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}"
            echo "always-auth=true"
          } > "$CFG"

          npm config get registry
          npm whoami

      - name: Determine component & version from tag/release
        id: info
        run: |
          set -euo pipefail
          TAG="${{ github.event.release.tag_name || github.ref_name }}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

          # compiler-v1.2.3 -> component=compiler, version=1.2.3
          # runtime-v1.2.3  -> component=runtime,  version=1.2.3
          # v1.2.3          -> component=ALL,      version=1.2.3
          if [[ "$TAG" =~ ^([a-zA-Z0-9_-]+)-v([0-9]+\.[0-9]+\.[0-9].*)$ ]]; then
            COMP="${BASH_REMATCH[1]}"; VER="${BASH_REMATCH[2]}"
          elif [[ "$TAG" =~ ^v([0-9]+\.[0-9]+\.[0-9].*)$ ]]; then
            COMP="ALL"; VER="${BASH_REMATCH[1]}"
          else
            echo "Unrecognized tag format: $TAG"; exit 1
          fi

          echo "component=$COMP" >> "$GITHUB_OUTPUT"
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Publish package(s)
        run: |
          set -euo pipefail
          COMP="${{ steps.info.outputs.component }}"
          VER="${{ steps.info.outputs.version }}"
          echo "Publishing for component=$COMP version=$VER"

          if [[ "$COMP" == "ALL" ]]; then
            pnpm -r publish --access public --no-git-checks --provenance || true
            exit 0
          fi

          case "$COMP" in
            compiler)    PKG="@lyra-dev/compiler" ;;
            runtime)     PKG="@lyra-dev/runtime" ;;
            vite-plugin) PKG="@lyra-dev/vite-plugin" ;;
            cli)         PKG="@lyra-dev/cli" ;;
            *) echo "Unknown component: $COMP"; exit 1 ;;
          esac

          pnpm -r --filter "$PKG" publish --access public --no-git-checks --provenance
