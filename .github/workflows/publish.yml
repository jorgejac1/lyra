name: Publish

on:
  release:
    types: [published] # auto publish on GitHub Release
  workflow_dispatch: # manual publish (pick package + version)
    inputs:
      component:
        description: "Package to publish"
        required: true
        type: choice
        options:
          - compiler
          - runtime
          - vite-plugin
          - cli
          - ALL
      version:
        description: "Version to publish (e.g. 1.0.3). Used only for manual runs."
        required: true
        type: string

permissions:
  contents: read
  id-token: write # needed for --provenance

jobs:
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug ref
        run: |
          echo "event: $GITHUB_EVENT_NAME"
          echo "ref:   $GITHUB_REF"
          echo "sha:   $GITHUB_SHA"
          git rev-parse HEAD
          git tag --points-at HEAD || true

      # Node + pnpm via Corepack
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: Enable Corepack & activate pnpm
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare pnpm@9 --activate
          which pnpm
          pnpm --version

      # pnpm cache
      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install deps
        run: pnpm install --frozen-lockfile

      # Build ONLY the publishable workspace packages
      - name: Build packages (workspace)
        run: pnpm -r -F "@lyra-dev/*" build

      # Auth (write to config npm actually uses on Actions)
      - name: Set npm token & verify auth
        run: |
          set -euxo pipefail
          test -n "${NPM_TOKEN}"

          CFG="${NPM_CONFIG_USERCONFIG:-$HOME/.npmrc}"
          {
            echo "@lyra-dev:registry=https://registry.npmjs.org/"
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}"
            echo "always-auth=true"
          } > "$CFG"

          npm config get registry
          npm config get @lyra-dev:registry
          npm whoami || true
          npm ping
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Determine component & version
      - name: Determine component & version from event
        id: info
        shell: bash
        run: |
          set -euo pipefail

          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            COMP="${{ github.event.inputs.component }}"
            VER="${{ github.event.inputs.version }}"
            if [[ -z "${COMP}" || -z "${VER}" ]]; then
              echo "Missing component/version inputs"; exit 1
            fi
            # basic semver sanity (allows prereleases/build metadata)
            if ! [[ "$VER" =~ ^[0-9]+\.[0-9]+\.[0-9]+([0-9A-Za-z\.\-\+]*)?$ ]]; then
              echo "Invalid version: $VER"; exit 1
            fi
          else
            TAG="${{ github.event.release.tag_name || github.ref_name }}"
            if [[ "$TAG" =~ ^([a-zA-Z0-9_-]+)-v([0-9]+\.[0-9]+\.[0-9].*)$ ]]; then
              COMP="${BASH_REMATCH[1]}"; VER="${BASH_REMATCH[2]}"
            elif [[ "$TAG" =~ ^v([0-9]+\.[0-9]+\.[0-9].*)$ ]]; then
              COMP="ALL"; VER="${BASH_REMATCH[1]}"
            else
              echo "Unrecognized tag format: $TAG"; exit 1
            fi
          fi

          echo "component=$COMP" >> "$GITHUB_OUTPUT"
          echo "version=$VER"   >> "$GITHUB_OUTPUT"
          echo "Resolved component=$COMP version=$VER"

      - name: Publish package(s)
        shell: bash
        run: |
          set -euo pipefail
          COMP="${{ steps.info.outputs.component }}"
          VER="${{ steps.info.outputs.version }}"
          echo "Publishing for component=$COMP version=$VER"

          if [[ "$COMP" == "ALL" ]]; then
            pnpm -r publish --access public --no-git-checks --provenance || true
            exit 0
          fi

          case "$COMP" in
            compiler)    PKG="@lyra-dev/compiler" ;;
            runtime)     PKG="@lyra-dev/runtime" ;;
            vite-plugin) PKG="@lyra-dev/vite-plugin" ;;
            cli)         PKG="@lyra-dev/cli" ;;
            *) echo "Unknown component: $COMP"; exit 1 ;;
          esac

          pnpm -r --filter "$PKG" publish --access public --no-git-checks --provenance
